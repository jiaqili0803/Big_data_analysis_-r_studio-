---
title: "HW2 Telemarketing"
author: "Ella Li (jiaqi li)"
date: "3/24/2020"
output:
  html_document:
    toc: true
    theme: readable
    highlight: tango
    code_folding: show
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## QUESTIONS
# 1. DEFAULT ? can delete in hw also
# 2. RANDOMNIZE? dont need this, because will train randomly actually




## Downloading and Prepping the Data

```{r}
#Downloading and Prepping the Data
tele <- read.csv("tele.csv", stringsAsFactors = TRUE)
summary(tele)

#We are deleting the "duration" variable because it is an after the fact measurement. We only should be using variables that we know before the call
tele$duration <- NULL

# Deleting the columns X
tele$X <- NULL

# only for class exercise!
tele$day_of_week <- NULL
tele$month <- NULL
tele$job <- NULL
tele$education <- NULL
tele$default <- NULL

set.seed(12345)
kill_rows <- sample(1:nrow(tele), 0.05*nrow(tele))
tele_small <- tele[kill_rows, ]


# Changing pdays to a dummy and deleting pdays
tele$pdaysdummy <- ifelse(tele$pdays == 999, 0, 1)
tele$pdays <- NULL

str(tele)
```

## Getting Data Ready for Analysis

```{r}
# Using model.matrix to convert all the factors to dummy variables
# We are converting all of the factors into dummy variables as the input into ANN has to be numeric

telemm <- as.data.frame(model.matrix(~.-1,tele))
str(telemm)

# Randomize the rows in the data (shuffling the rows)
# set.seed(12345)
# tele_random <- telemm[sample(nrow(telemm)),]

#Normalize the data
normalize <- function(x) {
  return ((x - min(x)) / (max(x) - min(x)))
}

# we are going to normalize everything 
# we use telemm here because  we did not randomize
tele_norm <- as.data.frame(lapply(telemm, normalize))
```


## Getting Train and Test Samples

```{r}
# Selects 10000 random rows for test data
set.seed(12345)
# choose 2000 only for class exercise, or 10000
test_set <- sample(1:nrow(tele_norm), 400) 
# Depending on R-version and computer, different rows may be selected. 
# If that happens, results are different. 

# Create a train set and test set
#First the predictors - all columns except the yyes column
tele_train <- tele_norm[-test_set, ]
tele_test <- tele_norm[test_set, ]

str(tele_train)
summary(tele_train)
str(tele_test)
summary(tele_test)

# yyes column

```

> Now you are ready to build your ANN model. Feel free to modify the data load, cleaning and preparation code above as per your preference.

> Build ANN train

```{r}
library(neuralnet)

model_1 <- neuralnet(yyes ~., data=tele_train, stepmax = 1e8) 

model_2 <- neuralnet(yyes ~., data=tele_train, hidden=5, stepmax = 1e8) 


# model_3 <- neuralnet(yyes ~., data=tele_train, hidde = c(4,3,2), stepmax = 1e8) 

```

```{r}
plot(model_1)
plot(model_2)
# plot(model_3)

```


> Predict test

```{r}
p1 <- predict(model_1, tele_test) # predict only use the x data from test set, to predict y
summary(p1)

p1_binary <- ifelse(p1 >= 0.5, 1, 0)


p2 <- predict(model_2, tele_test) # predict only use the x data from test set, to predict y
summary(p2)

p2_binary <- ifelse(p2 >= 0.5, 1, 0)

# p3 <- predict(model_3, tele_test) # predict only use the x data from test set, to predict y
# summary(p3)
# 
# p3_binary <- ifelse(p3 >= 0.5, 1, 0)



```


> Evaluate the confusion matirx 

```{r}
library(gmodels)

CrossTable(p1_binary, tele_test$yyes, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
# compare y and true y

CrossTable(p2_binary, tele_test$yyes, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)

# CrossTable(p3_binary, tele_test$yyes, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)

```
