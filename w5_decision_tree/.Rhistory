library(C50)
install.packages("C50")
library(C50)
str(iris)
iris_model <- C5.0(Species ~., data = iris)
plot(iris_model)
summary(iris_model)
summary(iris)
iris_pred <- predict(iris_model, iris)
table(iris_pred, iris$Species)
knitr::opts_chunk$set(echo = TRUE)
mail_data <- read.csv("MailData.csv")
str(hr_data)
mail_data <- read.csv("MailData.csv")
str(mail_data)
summary(mail_data)
mail_data <- read.csv("MailData.csv")
str(mail_data)
summary(mail_data)
is.na(mail_data)
mail_data <- read.csv("MailData.csv")
str(mail_data)
summary(mail_data)
summary(is.na(mail_data))
set.seed(12345)
test_set <- sample(1:nrow(mail_data), 0.2*nrow(mail_data)) #random sample
hr_test <- mail_data[test_set, ]
hr_train <- mail_data[-test_set, ]
mail_model <- C5.0(Spam ~., data = mail_train)
set.seed(12345)
test_set <- sample(1:nrow(mail_data), 0.2*nrow(mail_data)) #random sample
mail_test <- mail_data[test_set, ]
mail_train <- mail_data[-test_set, ]
mail_model <- C5.0(Spam ~., data = mail_train)
mail_data <- read.csv("MailData.csv")
mail_data$Spam <- as.factor(mail_data$Spam) # to factor
str(mail_data)
summary(mail_data)
summary(is.na(mail_data))
set.seed(12345)
test_set <- sample(1:nrow(mail_data), 0.2*nrow(mail_data)) #random sample
mail_test <- mail_data[test_set, ]
mail_train <- mail_data[-test_set, ]
mail_model <- C5.0(Spam ~., data = mail_train)
plot(mail_model)
summary(mail_model)
mail_pred <- predict(mail_model, mail_test) # predict only use the x data from test set, to predict y
summary(mail_pred)
table(mail_pred, mail_test$Spam)
# CrossTable(p1_binary, hr_test$left, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
mail_pred <- predict(mail_model, mail_test) # predict only use the x data from test set, to predict y
summary(mail_pred)
table(mail_pred, mail_test$Spam)
# CrossTable(p1_binary, hr_test$left, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
# table(mail_pred, mail_test$Spam)
CrossTable(mail_pred, mail_test$Spam, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
library(gmodels)
# table(mail_pred, mail_test$Spam)
CrossTable(mail_pred, mail_test$Spam, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
(512+311)/920
library(gmodels)
# table(mail_pred, mail_test$Spam)
CrossTable(mail_pred, mail_test$Spam, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
confusionMatrix(mail_pred, mail_test$Spam)
library(gmodels)
# table(mail_pred, mail_test$Spam)
CrossTable(mail_pred, mail_test$Spam, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
ConfusionMatrix(mail_pred, mail_test$Spam)
library(gmodels)
library(caret)
# table(mail_pred, mail_test$Spam)
CrossTable(mail_pred, mail_test$Spam, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
confusionMatrix(mail_pred, mail_test$Spam)
library(randomForest)
install.packages("randomForest")
library(randomForest)
knitr::opts_chunk$set(echo = TRUE)
library(C50)
str(iris)
iris_model <- C5.0(Species ~., data = iris)
plot(iris_model)
summary(iris)
iris_pred <- predict(iris_model, iris)
table(iris_pred, iris$Species)
mail_data <- read.csv("MailData.csv")
mail_data$Spam <- as.factor(mail_data$Spam) # to factor
str(mail_data)
summary(mail_data)
summary(is.na(mail_data))
# do not need randomize cause the decision tree do not "scale dependent"
set.seed(12345)
test_set <- sample(1:nrow(mail_data), 0.2*nrow(mail_data)) #random sample
mail_test <- mail_data[test_set, ]
mail_train <- mail_data[-test_set, ]
mail_model <- C5.0(Spam ~., data = mail_train)
plot(mail_model)
summary(mail_model)
mail_pred <- predict(mail_model, mail_test) # predict only use the x data from test set, to predict y
summary(mail_pred)
library(gmodels)
library(caret)
# table(mail_pred, mail_test$Spam)
CrossTable(mail_pred, mail_test$Spam, prop.chisq = F,prop.r = F, prop.c = F, prop.t = F)
confusionMatrix(mail_pred, mail_test$Spam)
credit <- read.csv("credit.csv")
str(credit)
summary(credit)
set.seed(12345)
test_set <- sample(1:nrow(credit), 0.2*nrow(credit)) #random sample
credit_test <- credit[test_set, ]
credit_train <- credit[-test_set, ]
# desision tree
dt_model <- C5.0(default ~., data = credit_train)
credit <- read.csv("credit.csv", stringsAsFactors = TRUE)
str(credit)
summary(credit)
set.seed(12345)
test_set <- sample(1:nrow(credit), 0.2*nrow(credit)) #random sample
credit_test <- credit[test_set, ]
credit_train <- credit[-test_set, ]
# desision tree
dt_model <- C5.0(default ~., data = credit_train)
dt_predict  <- predict(dt_model, credit_test) # predict only use the x data from test set, to predict y
confusionMatrix(dt_predict, credit_test$default, positive = 'yes')
library(randomForest)
credit <- read.csv("credit.csv", stringsAsFactors = TRUE)
str(credit)
summary(credit)
set.seed(12345)
test_set <- sample(1:nrow(credit), 0.2*nrow(credit)) #random sample
credit_test <- credit[test_set, ]
credit_train <- credit[-test_set, ]
# desision tree
dt_model <- C5.0(default ~., data = credit_train)
dt_predict  <- predict(dt_model, credit_test) # predict only use the x data from test set, to predict y
confusionMatrix(dt_predict, credit_test$default, positive = 'yes') # LOOKING AT THE POSITIVE VALUES WE WANT
library(randomForest)
credit <- read.csv("credit.csv", stringsAsFactors = TRUE)
str(credit)
summary(credit)
set.seed(12345)
test_set <- sample(1:nrow(credit), 0.2*nrow(credit)) #random sample
credit_test <- credit[test_set, ]
credit_train <- credit[-test_set, ]
dt_model <- C5.0(default ~., data = credit_train)
dt_predict  <- predict(dt_model, credit_test) # predict only use the x data from test set, to predict y
confusionMatrix(dt_predict, credit_test$default, positive = 'yes') # LOOKING AT THE POSITIVE VALUES WE WANT
library(randomForest)
rf_model <- randomForest(default ~., data = credit_train)
rf_predict <- predict(rf_model, credit_test)
confusionMatrix(rf_predict, credit_test$default, positive = 'yes')
randomForest::importance(rfmodel)
library(randomForest)
rf_model <- randomForest(default ~., data = credit_train)
rf_predict <- predict(rf_model, credit_test)
confusionMatrix(rf_predict, credit_test$default, positive = 'yes')
randomForest::importance(rf_model)
randomForest::varImpPlot(rf_model)
library(randomForest)
rf_model <- randomForest(default ~., data = credit_train)
rf_predict <- predict(rf_model, credit_test)
confusionMatrix(rf_predict, credit_test$default, positive = 'no')
randomForest::importance(rf_model)
randomForest::varImpPlot(rf_model)
library(randomForest)
rf_model <- randomForest(default ~., data = credit_train)
rf_predict <- predict(rf_model, credit_test)
confusionMatrix(rf_predict, credit_test$default, positive = 'yes')
randomForest::importance(rf_model)
randomForest::varImpPlot(rf_model)
knitr::opts_chunk$set(echo = TRUE)
application <- read.csv("application_record.csv")
knitr::opts_chunk$set(echo = TRUE)
application <- read.csv("application_record.csv")
credit <- read.csv("credit_record.csv")
library(do)
install.packages("do")
knitr::opts_chunk$set(echo = TRUE)
application <- read.csv("application_record.csv")
credit <- read.csv("credit_record.csv")
library(do)
STATUS1 <- Replace(data=credit$STATUS,from = c("0", "1", "2", "3", "4", "5"),to = 0)
STATUS2 <- Replace(data=STATUS1,from = c("X", "C"),to = 1)
credit$STATUS_NEW <- STATUS2
credit$STATUS_NEW <- as.numeric(credit$STATUS_NEW)
performance <- tapply(credit$STATUS_NEW, credit$ID, mean, na.rm = TRUE)
all <- as.data.frame(performance, row.names = NULL)
all$ID <- rownames(all)
credit$STATUE_FINAL <- all$performance[match(credit$ID, all$ID)]
credit$STATUEDUMMY <- ifelse(credit$STATUE_FINAL <=0.5, 0, 1)
application$STATUS <- credit$STATUEDUMMY[match(application$ID, credit$ID)]
new <- na.omit(application)
new$CODE_GENDER <- as.factor(new$CODE_GENDER)
new$FLAG_OWN_CAR <- as.factor(new$FLAG_OWN_CAR)
new$FLAG_OWN_REALTY <- as.factor(new$FLAG_OWN_REALTY)
new$CNT_CHILDREN <- NULL
new$NAME_INCOME_TYPE <- as.factor(new$NAME_INCOME_TYPE)
new$NAME_EDUCATION_TYPE <- as.factor(new$NAME_EDUCATION_TYPE)
new$FLAG_MOBIL <- NULL
new$FLAG_WORK_PHONE <- NULL
NEW_HOUSING_TYPE <- Replace(data = new$NAME_HOUSING_TYPE,from = c("Co-op apartment", "Municipal apartment", "Rented apartment"),to = "Rented apartment")
new$NEW_HOUSING_TYPE <- NEW_HOUSING_TYPE
new$NAME_HOUSING_TYPE <- NULL
new$NEW_HOUSING_TYPE <- as.factor(new$NEW_HOUSING_TYPE)
occupation1 <- Replace(data = new$OCCUPATION_TYPE, from = c("Accountants", "Core staff", "High skill tech staff", "HR staff", "IT staff", "Managers", "Medicine staff", "Realty agents", "Sales staff"), to = "White collar")
occupation2 <- Replace(data = occupation1, from = c("Cleaning staff", "Cooking staff", "Drivers", "Laborers", "Low-skill Laborers", "Security staff"), to = "Blue collar")
occupation3 <- Replace(data = occupation2, from = c("Private service staff", "Secretaries", "Waiters/barmen staff"), to = "Pink collar")
new$OCCUPATION_TYPE_NEW <- occupation3
new$OCCUPATION_TYPE_NEW[new$OCCUPATION_TYPE_NEW == '']<- NA
new$OCCUPATION_TYPE <- NULL
AGE <- round(new$DAYS_BIRTH*(-1)/365, digits = 0)
new$AGE <- AGE
new$DAYS_BIRTH <- NULL
YEARS_EMPLOYED1 <- round(new$DAYS_EMPLOYED*(-1)/365, digits = 0)
YEARS_EMPLOYED2 <- replace(YEARS_EMPLOYED1, YEARS_EMPLOYED1 < 0, 0)
new$YEARS_EMPLOYED <- YEARS_EMPLOYED2
new$DAYS_EMPLOYED <- NULL
NEW_FAMILY_STATUS <- Replace(data=new$NAME_FAMILY_STATUS,from = c("Civil marriage", "Married"),to = "Married")
new$NEW_FAMILY_STATUS <- NEW_FAMILY_STATUS
NEW_FAMILY_STATUS <- as.factor(NEW_FAMILY_STATUS)
new$NAME_FAMILY_STATUS <- NULL
new <- na.omit(new)
perfmm <- as.data.frame(model.matrix(~.-1,new))
str(perfmm)
set.seed(12345)
perf_random <- perfmm[sample(nrow(perfmm)),]
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
perf_norm <- as.data.frame(lapply(perf_random, normalize))
perf_norm$STATUS <- as.factor(perf_norm$STATUS)
str(perf_norm)
summary(perf_norm)
set.seed(12345)
test_set <- sample(1:nrow(perf_norm), 0.4*nrow(perf_norm))
perf_train <- perf_norm[-test_set, -18]
perf_test <- perf_norm[test_set, -18]
summary(perf_train)
test_label <- perf_norm[test_set, 18]
train_label <- perf_norm[-test_set, 18]
library(class)
knn_pred <- knn(train = perf_train, test = perf_test, cl = train_label, k = 121)
summary(knn_pred)
library(caret)
confusionMatrix(as.factor(test_label), as.factor(knn_pred), positive = "1")
library(class)
knn_pred <- knn(train = perf_train, test = perf_test, cl = train_label, k = 121)
summary(knn_pred)
library(caret)
confusionMatrix(as.factor(knn_pred), as.factor(knn_pred), positive = "1")
knitr::opts_chunk$set(echo = TRUE)
application <- read.csv("application_record.csv")
credit <- read.csv("credit_record.csv")
library(do)
STATUS1 <- Replace(data=credit$STATUS,from = c("0", "1", "2", "3", "4", "5"),to = 0)
STATUS2 <- Replace(data=STATUS1,from = c("X", "C"),to = 1)
credit$STATUS_NEW <- STATUS2
credit$STATUS_NEW <- as.numeric(credit$STATUS_NEW)
performance <- tapply(credit$STATUS_NEW, credit$ID, mean, na.rm = TRUE)
all <- as.data.frame(performance, row.names = NULL)
all$ID <- rownames(all)
credit$STATUE_FINAL <- all$performance[match(credit$ID, all$ID)]
credit$STATUEDUMMY <- ifelse(credit$STATUE_FINAL <=0.5, 0, 1)
application$STATUS <- credit$STATUEDUMMY[match(application$ID, credit$ID)]
new <- na.omit(application)
new$CODE_GENDER <- as.factor(new$CODE_GENDER)
new$FLAG_OWN_CAR <- as.factor(new$FLAG_OWN_CAR)
new$FLAG_OWN_REALTY <- as.factor(new$FLAG_OWN_REALTY)
new$CNT_CHILDREN <- NULL
new$NAME_INCOME_TYPE <- as.factor(new$NAME_INCOME_TYPE)
new$NAME_EDUCATION_TYPE <- as.factor(new$NAME_EDUCATION_TYPE)
new$FLAG_MOBIL <- NULL
new$FLAG_WORK_PHONE <- NULL
NEW_HOUSING_TYPE <- Replace(data = new$NAME_HOUSING_TYPE,from = c("Co-op apartment", "Municipal apartment", "Rented apartment"),to = "Rented apartment")
new$NEW_HOUSING_TYPE <- NEW_HOUSING_TYPE
new$NAME_HOUSING_TYPE <- NULL
new$NEW_HOUSING_TYPE <- as.factor(new$NEW_HOUSING_TYPE)
occupation1 <- Replace(data = new$OCCUPATION_TYPE, from = c("Accountants", "Core staff", "High skill tech staff", "HR staff", "IT staff", "Managers", "Medicine staff", "Realty agents", "Sales staff"), to = "White collar")
occupation2 <- Replace(data = occupation1, from = c("Cleaning staff", "Cooking staff", "Drivers", "Laborers", "Low-skill Laborers", "Security staff"), to = "Blue collar")
occupation3 <- Replace(data = occupation2, from = c("Private service staff", "Secretaries", "Waiters/barmen staff"), to = "Pink collar")
new$OCCUPATION_TYPE_NEW <- occupation3
new$OCCUPATION_TYPE_NEW[new$OCCUPATION_TYPE_NEW == '']<- NA
new$OCCUPATION_TYPE <- NULL
AGE <- round(new$DAYS_BIRTH*(-1)/365, digits = 0)
new$AGE <- AGE
new$DAYS_BIRTH <- NULL
YEARS_EMPLOYED1 <- round(new$DAYS_EMPLOYED*(-1)/365, digits = 0)
YEARS_EMPLOYED2 <- replace(YEARS_EMPLOYED1, YEARS_EMPLOYED1 < 0, 0)
new$YEARS_EMPLOYED <- YEARS_EMPLOYED2
new$DAYS_EMPLOYED <- NULL
NEW_FAMILY_STATUS <- Replace(data=new$NAME_FAMILY_STATUS,from = c("Civil marriage", "Married"),to = "Married")
new$NEW_FAMILY_STATUS <- NEW_FAMILY_STATUS
NEW_FAMILY_STATUS <- as.factor(NEW_FAMILY_STATUS)
new$NAME_FAMILY_STATUS <- NULL
new <- na.omit(new)
perfmm <- as.data.frame(model.matrix(~.-1,new))
str(perfmm)
set.seed(12345)
perf_random <- perfmm[sample(nrow(perfmm)),]
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
perf_norm <- as.data.frame(lapply(perf_random, normalize))
perf_norm$STATUS <- as.factor(perf_norm$STATUS)
str(perf_norm)
summary(perf_norm)
set.seed(12345)
test_set <- sample(1:nrow(perf_norm), 0.4*nrow(perf_norm))
perf_train <- perf_norm[-test_set, -18]
perf_test <- perf_norm[test_set, -18]
summary(perf_train)
test_label <- perf_norm[test_set, 18]
train_label <- perf_norm[-test_set, 18]
library(class)
knn_pred <- knn(train = perf_train, test = perf_test, cl = train_label, k = 121)
summary(knn_pred)
library(caret)
confusionMatrix(as.factor(knn_pred), as.factor(test_label), positive = "1")
