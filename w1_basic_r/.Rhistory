nyc$airgain <- nyc$dep_delay - nyc$arr_delay # creat a new column airgain
summary(nyc$airgain, na.rm=TRUE) # stast summary
airgain_each_carrier <- round(tapply(nyc$airgain, nyc$carrier, mean, na.rm=TRUE), 1) # for each carrier calculate mean of airgain and compare results
airgain_each_carrier
barplot(airgain_each_carrier, las=2, cex.names = 0.7) # plot
nyc$airgain <- nyc$dep_delay - nyc$arr_delay # creat a new column airgain
summary(nyc$airgain, na.rm=TRUE) # stast summary
airgain_each_carrier <- round(tapply(nyc$airgain, nyc$carrier, mean, na.rm=TRUE), 1) # for each carrier calculate mean of airgain and compare results
airgain_each_carrier
barplot(airgain_each_carrier, las=2, cex.names = 0.7) # plot
names(airgain_each_carrier[airgain_each_carrier == max(airgain_each_carrier)])
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.0/library")
library("foreign")
exists('read.spss')
install.packages("psych")
install.packages("lsr")
install.packages("car")
knitr::opts_chunk$set(echo = TRUE)
# import data
nyc <- read.csv("nycflights.csv")
```{r, cache=TRUE}
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# delete the columns are useless for analysis
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
str(nyc)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# look structure again
summary(nyc)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# look structure again
str(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# drop empty columns and rows
nyc <- remove_empty(nyc, which = c("rows","cols"), quiet = FALSE)
# import package
library(janitor)
install.packages("janitor")
library(janitor)
# import package
library(janitor)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# drop empty columns and rows
nyc <- remove_empty(nyc, which = c("rows","cols"), quiet = FALSE)
# look structure again (no x and year column now)
str(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
nyc$carrier
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
# import package
library(janitor)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# drop empty columns and rows
nyc <- remove_empty(nyc, which = c("rows","cols"), quiet = FALSE)
# look structure again (no x and year column now)
str(nyc)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# import package
library(janitor)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# drop empty columns and rows
nyc <- remove_empty(nyc, which = c("rows","cols"), quiet = FALSE)
# look structure again (no x and year column now)
str(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
level(number_of_airlines)
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
number_of_airlines
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
nyc$carrier
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
# indexing
nyc_oo <- nyc[nyc$carrier == "OO" , ]
nrow(nyc_oo)
# indexing
nyc_oo <- nyc[nyc$carrier == "OO" , ]
nrow(nyc_oo)
library(dplyr)
no_NA_air_time <- drop_na(nyc$air_time)
# import package
library(janitor)
library(dplyr)
# import data
nyc <- read.csv("nycflights.csv")
# look structure
str(nyc)
# look summary of data
summary(nyc)
# clean data
# find that "x", "year" column is useless, clean them
nyc$X <- NULL  # delete this column by assign NULL to it
nyc$year <- NULL  # delete this column by assign NULL to it
# drop empty columns and rows
nyc <- remove_empty(nyc, which = c("rows","cols"), quiet = FALSE)
# look structure again (no x and year column now)
str(nyc)
# find that "carrier", "tailnum", "origin", "dest", "time_hour", are characters, can not see the statistics from summary();
# convert to factor using as.factor()
nyc$carrier <- as.factor(nyc$carrier)
nyc$tailnum <- as.factor(nyc$tailnum)
nyc$origin <- as.factor(nyc$origin)
nyc$dest <- as.factor(nyc$dest)
# look summary of data
summary(nyc)
number_of_airlines <- nlevels(nyc$carrier) # nlevels: The Number of Levels of a Factor
number_of_airlines
# indexing
nyc_oo <- nyc[nyc$carrier == "OO" , ]
nrow(nyc_oo)
no_NA_air_time <- drop_na(nyc$air_time)
library(dplyr)
no_NA_air_time <- drop_na(nyc$air_time)
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(dplyr)
no_NA_air_time <- drop_na(nyc$air_time)
library(dplyr)
is.na(nyc$air_time)
#no_NA_air_time <- drop_na(nyc$air_time)
#min_air_time <-  min(no_NA_air_time)
library(dplyr)
no_NA_air_time <- na.omit(nyc$air_time)
#no_NA_air_time <- drop_na(nyc$air_time)
#min_air_time <-  min(no_NA_air_time)
library(dplyr)
no_NA_air_time <- na.omit(nyc$air_time)
is.na(no_NA_air_time)
#no_NA_air_time <- drop_na(nyc$air_time)
#min_air_time <-  min(no_NA_air_time)
library(dplyr)
no_NA_air_time <- na.omit(nyc$air_time)
table(is.na(no_NA_air_time))
#no_NA_air_time <- drop_na(nyc$air_time)
#min_air_time <-  min(no_NA_air_time)
no_NA_air_time <- na.omit(nyc$air_time)
#check na
table(is.na(no_NA_air_time))
min_air_time <-  min(no_NA_air_time)
no_NA_air_time <- na.omit(nyc$air_time)
#check na
table(is.na(no_NA_air_time))
min_air_time <-  min(no_NA_air_time)
min_air_time
nyc_UA_JAN_12 <- nyc[(nyc$carrier == "UA") & (nyc$month == 1) & (nyc$day == 12) , ] # here no column just means every column
# here, int should == int type, but  == str will also work because R will auto transfer to same type;
nrow(nyc_UA_JAN_12)
# method 1
# drop NA
no_NA_air_time <- na.omit(nyc$air_time)
#check NA again
table(is.na(no_NA_air_time)) # only False mean: no NA
# min
min_air_time <-  min(no_NA_air_time)
min_air_time
# method 2
min(nyc$air_time, na.rm = TRUE) # REMOVE NA
#rm(nycoo) # rm() function in R Language is used to delete objects from the memory
average_arrival_delay <- mean(nyc$arr_delay, na.rm = TRUE)
average_arrival_delay
median_arrival_delay <- median(nyc$arr_delay, na.rm = TRUE)
median_arrival_delay
# plot hist
no_NA_arr_delay <- na.omit(nyc$arr_delay)
#check NA again
table(is.na(no_NA_arr_delay)) # only False mean: no NA
hist(no_NA_arr_delay, breaks=12, col="green")
# plot hist
no_NA_arr_delay <- na.omit(nyc$arr_delay)
#check NA again
table(is.na(no_NA_arr_delay)) # only False mean: no NA
hist(no_NA_arr_delay, breaks=50, col="green")
# plot hist
no_NA_arr_delay <- na.omit(nyc$arr_delay)
#check NA again
table(is.na(no_NA_arr_delay)) # only False mean: no NA
hist(no_NA_arr_delay, breaks=50, col="green")
xfit <- seq(min(no_NA_arr_delay),max(no_NA_arr_delay),length=40)
# plot hist
no_NA_arr_delay <- na.omit(nyc$arr_delay)
#check NA again
table(is.na(no_NA_arr_delay)) # only False mean: no NA
hist(no_NA_arr_delay, breaks=50, col="green")
airline_delay <- round(tapply(nyc$arr_delay, nyc$carrier, mean, na.rm=TRUE), 2)
# do mean for each carrier's delay time using "tapply" and round to 0.00
airline_delay
barplot(airline_delay, las=2, cex.names = 0.7)  # las means rotation 90, cex.names changes the Size of name text
highest_ave_ad <= max(airline_delay)
highest_ave_ad <- max(airline_delay)
smallest_ave_ad <- min(airline_delay)
negative_ave_ad <- airline_delay[airline_delay < 0]
highest_ave_ad <- max(airline_delay)
highest_ave_ad
smallest_ave_ad <- min(airline_delay)
smallest_ave_ad
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
highest_ave_ad <- max(airline_delay)
highest_ave_ad
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
highest_ave_ad <- max(airline_delay)
highest_ave_ad
names(highest_ave_ad)
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
names(airline_delay[airline_delay == highest_ave_ad])
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
smallest_airline <- names(airline_delay[airline_delay == smallest_ave_ad])
smallest_airline
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
smallest_airline <- names(airline_delay[airline_delay == smallest_ave_ad])
smallest_airline
# neg
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
negative_airline <- names(airline_delay[airline_delay == negative_ave_ad])
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
smallest_airline <- names(airline_delay[airline_delay == smallest_ave_ad])
smallest_airline
# neg
negative_ave_ad <- airline_delay[airline_delay < 0]
names(negative_ave_ad)
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
smallest_airline <- names(airline_delay[airline_delay == smallest_ave_ad])
smallest_airline
# neg
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
names(negative_ave_ad)
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
smallest_airline <- names(airline_delay[airline_delay == smallest_ave_ad])
smallest_airline
# neg
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
smallest_airline <- names(negative_ave_ad)
smallest_airline
# highest
highest_ave_ad <- max(airline_delay)
highest_ave_ad
highest_airline <- names(airline_delay[airline_delay == highest_ave_ad])
highest_airline
# smallest
smallest_ave_ad <- min(airline_delay[airline_delay > 0])
smallest_ave_ad
smallest_airline <- names(airline_delay[airline_delay == smallest_ave_ad])
smallest_airline
# neg
negative_ave_ad <- airline_delay[airline_delay < 0]
negative_ave_ad
negative_airline <- names(negative_ave_ad)
negative_airline
# create a new column airgain
nyc$airgain <- nyc$dep_delay - nyc$arr_delay
# stats summary
summary(nyc$airgain, na.rm=TRUE)
# create a new column airgain
nyc$airgain <- nyc$dep_delay - nyc$arr_delay
nyc$airgain
# create a new column airgain
nyc$airgain <- nyc$dep_delay - nyc$arr_delay
# create a new column airgain
nyc$airgain <- nyc$dep_delay - nyc$arr_delay
str(nyc$airgain)
# create a new column airgain
nyc$airgain <- nyc$dep_delay - nyc$arr_delay
str(nyc)
# descriptive statistics
# stats summary
summary(nyc$airgain, na.rm=TRUE)
# graphics
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
# Tukey min,lower-hinge, median,upper-hinge,max
fivenum(nyc$airgain, na.rm=TRUE)
# graphics
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
# graphics
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
# graphics
barplot(nyc$airgain, na.rm=TRUE)
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
# graphics
barplot(nyc$airgain)
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
table(nyc$airgain, na.rm=TRUE)
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
table(nyc$airgain)
# graphics
barplot(nyc$airgain, na.rm=TRUE)
# descriptive statistics
# mean,median,25th and 75th quartiles,min,max
summary(nyc$airgain, na.rm=TRUE)
# graphics
hist(nyc$airgain, na.rm=TRUE)
# plot hist
no_NA_arr_delay <- na.omit(nyc$arr_delay)
#check NA again
table(is.na(no_NA_arr_delay)) # only False mean: no NA
hist(no_NA_arr_delay, breaks=50, col="green", na.rm=TRUE)
airgain_each_carrier <- round(tapply(nyc$airgain, nyc$carrier, mean, na.rm=TRUE), 1) # for each carrier calculate mean of airgain and compare results
airgain_each_carrier
barplot(airgain_each_carrier, las=2, cex.names = 0.7) # plot
names(airgain_each_carrier[airgain_each_carrier == max(airgain_each_carrier)]) # filter the name of max air gain mean carrier.
airgain_each_carrier <- round(tapply(nyc$airgain, nyc$carrier, mean, na.rm=TRUE), 1) # for each carrier calculate mean of airgain and compare results
airgain_each_carrier
barplot(airgain_each_carrier, las=2, cex.names = 0.7) # plot
max_airgain_carrier <- names(airgain_each_carrier[airgain_each_carrier == max(airgain_each_carrier)]) # filter the name of max air gain mean carrier.
min_airgain_carrier <- names(airgain_each_carrier[airgain_each_carrier == min(airgain_each_carrier)]) # filter the name of max air gain mean carrier.
airgain_each_carrier <- round(tapply(nyc$airgain, nyc$carrier, mean, na.rm=TRUE), 1) # for each carrier calculate mean of airgain and compare results
airgain_each_carrier
barplot(airgain_each_carrier, las=2, cex.names = 0.7) # plot
max_airgain_carrier <- names(airgain_each_carrier[airgain_each_carrier == max(airgain_each_carrier)]) # filter the name of max air gain mean carrier.
max_airgain_carrier
min_airgain_carrier <- names(airgain_each_carrier[airgain_each_carrier == min(airgain_each_carrier)]) # filter the name of max air gain mean carrier.
min_airgain_carrier
